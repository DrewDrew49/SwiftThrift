<?php

class ItemHandler {
	static function getItemWithId($id){
		if(!is_integer($id)){
			throw new Exception('Expected integer');
			die();
		}

		$db = new Database();
		$result = $db->query("SELECT * FROM items WHERE id = $id")->fetch_assoc();

		$item = new Item(
			$result['id'],
			$result['title'],
			$result['description'],
			$result['imgPath'],
			$result['category'],
			$result['keywords'],
			$result['postedTS'],
			$result['updatedTS'],
			$result['price'],
			$result['published'],
			$result['sellerId']
			);

		return $item;
	}

	static function getUnpublishedItemWithId($id){
		if(!is_integer($id)){
			throw new Exception('Expected integer');
			die();
		}

		$db = new Database();
		$result = $db->query("SELECT * FROM items WHERE id = $id")->fetch_assoc();

		if(!$result['published']){
			return null;
		}

		$item = new Item(
			$result['id'],
			$result['title'],
			$result['description'],
			$result['imgPath'],
			$result['category'],
			$result['keywords'],
			$result['postedTS'],
			$result['updatedTS'],
			$result['price'],
			$result['published'],
			$result['sellerId']
			);

		return $item;
	}

		public static function getAllItems(){

		$db = new Database();
		$result = $db->query("SELECT * FROM items ORDER BY id DESC");

		$return = array();
		
		while($row = $result->fetch_assoc()){
			$return[] = $row;
		}

		return $return;
	}

	public static function getAllUnpublishedItems(){

		$db = new Database();
		$result = $db->query("SELECT * FROM items WHERE published = 0 ORDER BY id DESC");

		$return = array();
		
		while($row = $result->fetch_assoc()){
			$return[] = $row;
		}

		return $return;
	}

	static function getItemsForSellerId($sellerID){

		$db = new Database();
		$result = $db->query("SELECT * FROM items WHERE sellerID = $sellerID");

		$itemArray = array();

		while($row = $result->fetch_assoc()){
			$itemArray[] = $row;
		}

		return $itemArray;
	}


	static function getItemsForCategoryId($id){
		if(!is_integer($id)){
			throw new Exception('Expected integer');
			die();
		}

		$items = array();

		$db = new Database();
		$result = $db->query("SELECT id FROM items WHERE category = $id");

		while($row = $result->fetch_assoc()){
			$items[] = self::getUnpublishedItemWithId((int)$row['id']);
		}

		return $items;
	}

	static function insertItem($item){
		if(!$item instanceof Item){
			throw new Exception('Incoming object is not an Item');
			die();
		}

		$db = new Database();

		$title = $db->real_escape_string($item->getTitle());
		$description = $db->real_escape_string($item->getDescription());
		$keywords = $db->real_escape_string($item->getKeywords());

		//need to make keywords column in database for items
		$sql = "INSERT INTO items VALUES (
			NULL,
			'$title',
			'{$item->getSellerId()}',
			'$description',
			'{$item->getImgPath()}',
			{$item->getPriceAsNumber()},
			CURRENT_TIMESTAMP(),
			NULL,
			{$item->getPublishedAsInt()},
			{$item->getCategory()},
			'$keywords')";


$result = $db->query($sql);

return $db->insert_id;
}

static function deleteItemWithId($id){
	if(!is_integer($id)){
		throw new Exception('Expected integer');
		die();
	}

	$db = new Database();
	$result = $db->query("DELETE FROM items WHERE id = $id LIMIT 1");

	return $result;
}

	// Admin
static function updateStatusForItemWithId($id, $status){
	if(!is_integer($id)){
		throw new Exception('Expected integer');
		die();
	}

	$db = new Database();
	$result = $db->query("UPDATE items SET published = {$status} WHERE id = {$id}");

	return $result;
}

static function publishItemWithId($id){
	return ItemHandler::updateStatusForItemWithId($id, 1);
}

static function unpublishItemWithId($id){
	return ItemHandler::updateStatusForItemWithId($id, 0);
}
}
?>
